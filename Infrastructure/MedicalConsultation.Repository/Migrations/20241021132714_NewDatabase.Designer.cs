// <auto-generated />
using System;
using MedicalConsultation.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalConsultation.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241021132714_NewDatabase")]
    partial class NewDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HorariosDiaSemana", b =>
                {
                    b.Property<int>("HorarioDiaId")
                        .HasColumnType("INT");

                    b.Property<int>("HorarioId")
                        .HasColumnType("INT");

                    b.HasKey("HorarioDiaId", "HorarioId");

                    b.HasIndex("HorarioId");

                    b.ToTable("HorariosDiaSemana");
                });

            modelBuilder.Entity("MedicalConsultation.Entity.Consultation.ConsultationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<DateTime?>("DataStatus")
                        .IsRequired()
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consulta", (string)null);
                });

            modelBuilder.Entity("MedicalConsultation.Entity.MedicalDoctor.MedicalDoctorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("MedicalConsultation.Entity.Schedule.DailySchedulesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("DiaDaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HorarioDia", (string)null);
                });

            modelBuilder.Entity("MedicalConsultation.Entity.Schedule.TimeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("DiaDaSemana")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("TIME");

                    b.HasKey("Id");

                    b.ToTable("Horario", (string)null);
                });

            modelBuilder.Entity("MedicalConsultation.Entity.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("BIT");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("VARCHAR(14)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);

                    b.HasDiscriminator().HasValue("UserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MedicalConsultation.Entity.Patient.PatientEntity", b =>
                {
                    b.HasBaseType("MedicalConsultation.Entity.UserEntity");

                    b.HasDiscriminator().HasValue("PatientEntity");
                });

            modelBuilder.Entity("HorariosDiaSemana", b =>
                {
                    b.HasOne("MedicalConsultation.Entity.Schedule.DailySchedulesEntity", null)
                        .WithMany()
                        .HasForeignKey("HorarioDiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalConsultation.Entity.Schedule.TimeEntity", null)
                        .WithMany()
                        .HasForeignKey("HorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalConsultation.Entity.Consultation.ConsultationEntity", b =>
                {
                    b.HasOne("MedicalConsultation.Entity.MedicalDoctor.MedicalDoctorEntity", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalConsultation.Entity.Patient.PatientEntity", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("MedicalConsultation.Entity.MedicalDoctor.MedicalDoctorEntity", b =>
                {
                    b.HasOne("MedicalConsultation.Entity.UserEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
