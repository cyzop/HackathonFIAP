@page "/person"

@using MedicalConsultation.Shared
@using MedicalConsultation.WebApp.Services
@using Microsoft.AspNetCore.Authorization
@using BlazorInputMask

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@inject UsuarioService UsuarioService
@inject IHttpClientFactory HttpClientFactory

@attribute [Authorize]

<h3>Minhas informações</h3>

@if (userInfo == null)
{
    <p><em>Loading...</em></p>
    <button class="btn btn-secondary" @onclick="Voltar" type="button">Cancelar</button>
}
else
{

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />

            <EditForm Model="@userInfo" OnValidSubmit="UpdateUser" FormName="UserInfo">
            <hr />
            
            <div class="form-floating mb-3">

                    <InputText @bind-Value="userInfo.Name" @bind-Value:event="oninput" class="form-control" autocomplete="username" aria-required="true" placeholder="Seu Nome" />
                    <label for="nome">Nome</label>
                <ValidationMessage For="() => userInfo.Name" class="text-danger" />
            </div>
             <div class="form-floating mb-3">
                <InputMask Mask="000.000.000-00" @bind-Value="userInfo.cpf" class="form-control" autocomplete="CPF" aria-required="true" placeholder="CPF" />
                <label for="cpf">CPF</label>
                <ValidationMessage For="() => userInfo.cpf" class="text-danger" />
            </div>

                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
            @* <button type="submit" class="w-100 btn btn-lg btn-primary">Salvar</button> *@
                <button class="btn btn-success" type="submit">Salvar</button>
        </EditForm>
    </div>
   
</div>
}

@code {
    private HttpClient _httpClient;
    private string? Message { get; set; }
    private UserDao userInfo { get; set; } = new();
    private bool _initialized;

    async Task UpdateUser()
    {
        if (string.IsNullOrEmpty(userInfo.cpf))
        {
            Message = "Informe o CPF antes de continuar.";
            return;
        }

        if (string.IsNullOrEmpty(userInfo.Name))
        {
            JSRuntime.InvokeAsync<bool>("alert", $"Informe o nome antes de continuar.");
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Confirma atualizar estas informações?");
        if (confirmed is false)
            return;

        _httpClient = HttpClientFactory.CreateClient("UserApi");
        var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(userInfo), Encoding.UTF8, "application/json");
        var response = await _httpClient.PostAsync("user/Alterar", content);
        if (response.IsSuccessStatusCode && response.StatusCode == System.Net.HttpStatusCode.OK)
            Voltar();
        else
            JSRuntime.InvokeAsync<bool>("alert", $"Falha na operação {response.StatusCode}");
    }        
    private void Voltar()
    {
        NavigationManager.NavigateTo($"");
    }
    protected override async Task OnInitializedAsync()
    {
        if (!_initialized)
        {
            _initialized = true;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                try
                {
                    if (userInfo == null)
                    {
                        var url = $"User/{user.Identity.Name}";
                        _httpClient = HttpClientFactory.CreateClient("UserApi");
                        var response = await _httpClient.GetAsync(url);

                        if (response.IsSuccessStatusCode &&
                            response.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            string content = await response.Content.ReadAsStringAsync();
                            UserDao usuario = JsonConvert.DeserializeObject<UserDao>(content);
                            if (usuario != null)
                            {
                                userInfo = usuario;
                                StateHasChanged();//atualizar tela
                            }
                        }
                        else
                        {
                            var erro = await response.Content.ReadAsStringAsync();
                        }
                    }
                }
                catch (Exception ex)
                {
                    JSRuntime.InvokeAsync<bool>("alert", $"Err {ex.Message}");
                }
                //  }
            }
        }
    }
}
