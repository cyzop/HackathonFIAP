@page "/schedules"
@using MedicalConsultation.WebApp.Client.Extensions
@using MedicalConsultation.Shared
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;
@inject IHttpClientFactory HttpClientFactory

@rendermode InteractiveAuto

<PageTitle>Meus Agendamentos</PageTitle>
<h3>Meus Agendamentos</h3>

<p>
    <button class="btn btn-secondary" @onclick="Voltar">Voltar</button>
    <button class="btn btn-info" @onclick="AgendarConsulta">Novo Agendamento</button>
</p>

@if (agendamentos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Médico</th>
                <th>Data</th>
                <th>Horário</th>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var consulta in agendamentos)
            {
                <tr>
                    <td>@consulta.Status</td>
                    <td>@consulta.Date.ToString("dd/MM/yyyy")</td>
                    <td>@consulta.Date.ToString("HH:mm")</td>
                    <button class="btn btn-success" @onclick="() => CancelarConsulta(consulta)">Cancelar</button>
                </tr>
            }
        </tbody>
    </table>
    
}

@code {
    private ConsultationDao[]? agendamentos;
    private HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                _httpClient = HttpClientFactory.CreateClient("ConsultationApi");
                var response = await _httpClient.GetAsync("Consultation/ListarPorPaciente/1");
                if (response.IsSuccessStatusCode && response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    string content = await response.Content.ReadAsStringAsync();
                    agendamentos = JsonSerializer.Deserialize<ConsultationDao[]>(content);
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            JSRuntime.InvokeAsync<bool>("prompt", $"Erro {ex.Message}");
        }
    }

    private void CancelarConsulta(ConsultationDao schedule)
    {
        //confirmar para excluir
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo($"/");
    }

    private void AgendarConsulta(){
        NavigationManager.NavigateTo($"/newschedule");
    }

}
